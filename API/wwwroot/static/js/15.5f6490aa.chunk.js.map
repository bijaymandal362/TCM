{"version":3,"sources":["store/actions/projectActionCreators.ts","store/actions/userActionCreators.ts","pages/User/EditUser.tsx"],"names":["getProjectList","data","a","setHeaders","axiosInstance","url","method","params","response","createProject","getDropdownLists","category","getUserList","getUserMetaList","updateUser","getUserDetail","user","requestUrl","Option","Select","EditUser","Form","useForm","form","useState","role","setRole","loading","setLoading","history","useHistory","route","useRouteMatch","marketList","setMarketList","roleList","setRoleList","userId","handleFormSubmit","values","console","log","userRoleListItemId","market","error","message","success","getMarketLists","getRoleList","map","item","value","listItemId","label","listItemName","loadUser","name","username","email","roleId","marketId","setFieldsValue","status","useEffect","className","span","Item","href","layout","onFinish","initialValues","onValuesChange","changedValues","fieldName","Object","keys","gutter","lg","xs","rules","required","size","placeholder","readOnly","type","index","htmlType","onClick","push"],"mappings":"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","file":"static/js/15.5f6490aa.chunk.js","sourcesContent":["import axiosInstance from \"../../axios/axios\";\r\nimport { getProjectId, setHeaders } from \"../../util/localStorage.util\";\r\nimport { GET_PROJECT_DETAILS } from \"./types/projectTypes\";\r\n\r\nexport const getProjectList = async (data: any): Promise<[any, any]> => {\r\n  setHeaders();\r\n  try {\r\n    const response = await axiosInstance({\r\n      url: \"/Project/GetProjectListFilterByModule\",\r\n      method: \"POST\",\r\n      params: data,\r\n    });\r\n    return [response, null];\r\n  } catch (err) {\r\n    return [null, err];\r\n  }\r\n};\r\n\r\nexport const createProject = async (data: any): Promise<[any, any]> => {\r\n  setHeaders();\r\n  try {\r\n    const response = await axiosInstance({\r\n      url: \"/Project/AddProject\",\r\n      method: \"POST\",\r\n      data,\r\n    });\r\n    return [response, null];\r\n  } catch (err) {\r\n    return [null, err];\r\n  }\r\n};\r\n\r\nexport const getProjectDetails = async (): Promise<[any, any]> => {\r\n  setHeaders();\r\n  try {\r\n    const response = await axiosInstance({\r\n      url: `/Project/GetProjectByProjectId/${getProjectId()}`,\r\n      method: \"GET\",\r\n    });\r\n\r\n    return [response, null];\r\n  } catch (err) {\r\n    return [null, err];\r\n  }\r\n};\r\n\r\nexport const getDropdownLists = async (category: any): Promise<[any, any]> => {\r\n  setHeaders();\r\n  try {\r\n    const response = await axiosInstance({\r\n      url: `/Common/GetListItemByListItemCategorySystemName/${category}`,\r\n      method: \"GET\",\r\n    });\r\n    return [response, null];\r\n  } catch (err) {\r\n    return [null, err];\r\n  }\r\n};\r\n","import axiosInstance from \"../../axios/axios\";\r\nimport { setHeaders } from \"../../util/localStorage.util\";\r\n\r\nexport const getUserList = async (data: {\r\n  PageNumber: number;\r\n  SearchValue: string | null;\r\n  PageSize: number;\r\n  roleId: string | number;\r\n}): Promise<[any, any]> => {\r\n  setHeaders();\r\n  try {\r\n    const response = await axiosInstance({\r\n      url: \"/User/GetUserListFilterByRole\",\r\n      method: \"GET\",\r\n      params: data,\r\n    });\r\n    return [response, null];\r\n  } catch (err) {\r\n    return [null, err];\r\n  }\r\n};\r\n\r\nexport const getUserMetaList = async (): Promise<[any, any]> => {\r\n  setHeaders();\r\n  try {\r\n    const response = await axiosInstance({\r\n      url: \"/User/GetRoleList\",\r\n      method: \"GET\",\r\n    });\r\n    return [response, null];\r\n  } catch (err) {\r\n    return [null, err];\r\n  }\r\n};\r\n\r\nexport const updateUser = async (data: any): Promise<[any, any]> => {\r\n  setHeaders();\r\n  try {\r\n    const response = await axiosInstance({\r\n      url: \"/User/UpdateUser\",\r\n      method: \"POST\",\r\n      params: data,\r\n    });\r\n    return [response, null];\r\n  } catch (err) {\r\n    return [null, err];\r\n  }\r\n};\r\n\r\nexport const getUserDetail = async (\r\n  user: string | number\r\n): Promise<[any, any]> => {\r\n  setHeaders();\r\n  try {\r\n    const requestUrl = `/User/GetUserDetail/${user}`;\r\n    const response = await axiosInstance({\r\n      url: requestUrl,\r\n      method: \"GET\",\r\n    });\r\n    return [response, null];\r\n  } catch (err) {\r\n    return [null, err];\r\n  }\r\n};\r\n","import {\r\n    Breadcrumb,\r\n    Button,\r\n    Col,\r\n    Divider,\r\n    Form,\r\n    Input,\r\n    message,\r\n    Row,\r\n    Select,\r\n} from \"antd\";\r\n\r\nimport { useHistory, useRouteMatch } from \"react-router\";\r\nimport {\r\n    updateUser, getUserDetail\r\n} from \"../../store/actions/userActionCreators\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n    getDropdownLists,\r\n} from \"../../store/actions/projectActionCreators\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport const EditUser = () => {\r\n    const [form] = Form.useForm();\r\n    const [role, setRole] = useState(0)\r\n    const [loading, setLoading] = useState(false);\r\n    const history = useHistory();\r\n    const route = useRouteMatch<{ userId: string }>();\r\n    const [marketList, setMarketList] = useState([]);\r\n    const initialFormValues = { name: \"\", username: \"\", email: \"\", role: \"\", market: \"\" }\r\n    const [roleList, setRoleList] = useState([]);\r\n    const userId = route.params?.userId || 0;\r\n\r\n\r\n    const handleFormValueChange = (changedValues: any) => {\r\n        const fieldName = Object.keys(changedValues)[0];\r\n\r\n        if (fieldName === \"role\") {\r\n            const value = changedValues[fieldName];\r\n            if (value !== \"28\") {\r\n                form.setFieldsValue({ market: \"\" })\r\n            }\r\n            setRole(value)\r\n        }\r\n\r\n    }\r\n\r\n    const handleFormSubmit = async (values: any) => {\r\n        setLoading(true);\r\n        console.log(values)\r\n        const data: { [key: string]: any } = {\r\n            userId: userId,\r\n            userRoleListItemId: values.role,\r\n        };\r\n\r\n        if (values.market) {\r\n            data.market = values.market\r\n        }\r\n\r\n        const [response, error] = await updateUser(data);\r\n        setLoading(false);\r\n        if (response) {\r\n            message.success(\"User Updated Sucessfully \");\r\n        }\r\n        if (error) {\r\n            message.error(\"Unable to Update User :(  \");\r\n        }\r\n    };\r\n\r\n    const getMarketLists = async () => {\r\n        const [response, error] = await getDropdownLists(\"ProjectMarket\");\r\n\r\n        if (response) {\r\n            setMarketList(response.data);\r\n        }\r\n        if (error) {\r\n            message.error(\"Failed to list market\");\r\n        }\r\n    };\r\n    const getRoleList = async () => {\r\n        const [response, error] = await getDropdownLists(\"UserRole\");\r\n\r\n        if (response) {\r\n            const data = response.data;\r\n            data.map((item: any) => ({ value: item.listItemId, label: item.listItemName }))\r\n            setRoleList(data);\r\n        }\r\n        if (error) {\r\n            setRoleList([])\r\n            message.error(\"Failed to list role\");\r\n        }\r\n    };\r\n\r\n    const loadUser = async () => {\r\n        const [response, error] = await getUserDetail(userId);\r\n\r\n        if (response) {\r\n            const data = response?.data;\r\n            const { name, username, email, roleId: role, marketId: market } = data;\r\n            form.setFieldsValue({ name, username, email, role, market })\r\n        }\r\n        if (error) {\r\n            if (error.status === 404) {\r\n                // history.push(\"/admin/users\")\r\n            }\r\n            message.error(\"Failed to load user\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRoleList();\r\n        getMarketLists()\r\n        loadUser();\r\n    }, [])\r\n\r\n    return (\r\n        <Row className=\"mt-4 p-4\">\r\n\r\n            <Col span=\"24\" className=\"p-2 mt-2\">\r\n                <Breadcrumb>\r\n                    <Breadcrumb.Item>User settings</Breadcrumb.Item>\r\n                    <Breadcrumb.Item>\r\n                        <a href={`/admin/users/${1}`}>Edit Profile</a>\r\n                    </Breadcrumb.Item>\r\n                </Breadcrumb>\r\n                <Divider />\r\n\r\n                <Form\r\n                    className=\"mt-4\"\r\n                    layout=\"vertical\"\r\n                    onFinish={handleFormSubmit}\r\n                    form={form}\r\n                    initialValues={initialFormValues}\r\n                    onValuesChange={handleFormValueChange}\r\n\r\n                >\r\n                    <Row gutter={24}>\r\n                        <Col lg={16} xs={24} className=\"gutter-row\">\r\n                            <Form.Item\r\n                                label=\"Full Name\"\r\n                                name=\"name\"\r\n                                rules={[\r\n                                    { required: true, message: \"Full Name is Required\" },\r\n                                ]}\r\n                            >\r\n                                <Input size=\"large\" placeholder=\"Ram Sharma\" readOnly />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row gutter={24}>\r\n                        <Col lg={16} xs={24} className=\"gutter-row\">\r\n                            <Form.Item\r\n                                label=\"Username\"\r\n                                name=\"username\"\r\n                                rules={[\r\n                                    { required: true, message: \"Username is Required\" },\r\n                                ]}\r\n                            >\r\n                                <Input size=\"large\" placeholder=\"ram234\" readOnly />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row gutter={24}>\r\n                        <Col lg={16} xs={24} className=\"gutter-row\">\r\n                            <Form.Item\r\n                                label=\"Email\"\r\n                                name=\"email\"\r\n                                rules={[\r\n                                    { required: true, message: \"Email is Required\" },\r\n                                ]}\r\n\r\n                            >\r\n                                <Input size=\"large\" type=\"email\" placeholder=\"hello@gmail.com\" readOnly />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row gutter={24}>\r\n                        <Col lg={16} xs={24} className=\"gutter-row\">\r\n                            <Form.Item\r\n                                label=\"Role\"\r\n                                name=\"role\"\r\n                                rules={[{ required: true, message: \"Role is Required\" }]}\r\n                            >\r\n                                <Select size=\"large\" placeholder=\"Select Role\">\r\n                                    {roleList.map((item: any, index: number) => {\r\n                                        return (\r\n                                            <Option key={index} value={item?.listItemId}>\r\n                                                {item?.listItemName}\r\n                                            </Option>\r\n                                        );\r\n                                    })}\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row gutter={24}>\r\n                        <Col lg={16} xs={24} className=\"gutter-row\">\r\n                            {role === 28 && <Form.Item\r\n                                label=\"Market\"\r\n                                name=\"market\"\r\n                                rules={[{ required: true, message: \"Market is Required\" }]}\r\n                            >\r\n                                <Select size=\"large\" placeholder=\"Select Market\">\r\n                                    {marketList.map((item: any, index: number) => {\r\n                                        return (\r\n                                            <Option key={index} value={item?.listItemId}>\r\n                                                {item?.listItemName}\r\n                                            </Option>\r\n                                        );\r\n                                    })}\r\n                                </Select>\r\n                            </Form.Item>\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n\r\n\r\n\r\n\r\n                    <Row className=\"mt-4\">\r\n                        <Col lg={8} xs={12}>\r\n                            <Form.Item>\r\n                                <Button size=\"middle\" loading={loading} type=\"primary\" htmlType=\"submit\">\r\n                                    Update User\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col lg={8} xs={12} className=\"d-flex justify-content-end\">\r\n                            <Form.Item>\r\n                                <Button\r\n                                    type=\"default\"\r\n                                    size=\"middle\"\r\n                                    onClick={() => {\r\n                                        history.push(\"/admin/users\");\r\n                                    }}\r\n                                >\r\n                                    Go Back\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default EditUser;\r\n\r\n"],"sourceRoot":""}