{"version":3,"sources":["store/actions/projectActionCreators.ts","pages/Project/CreateProject.tsx"],"names":["getProjectList","data","a","setHeaders","axiosInstance","url","method","params","response","createProject","getDropdownLists","category","Option","Select","CreateProject","Form","useForm","form","useState","marketList","setMarketList","loading","setLoading","history","useHistory","handleFormSubmit","values","projectName","project_name","startDate","moment","start_date","format","projectMarketListItemId","market","projectDescription","project_description","error","message","success","push","getMarketLists","useEffect","className","lg","xs","style","fontSize","Item","href","layout","onFinish","gutter","label","name","rules","required","placeholder","onChange","map","item","index","value","listItemId","listItemName","showCount","maxLength","type","htmlType","onClick"],"mappings":"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","file":"static/js/16.33195585.chunk.js","sourcesContent":["import axiosInstance from \"../../axios/axios\";\r\nimport { getProjectId, setHeaders } from \"../../util/localStorage.util\";\r\nimport { GET_PROJECT_DETAILS } from \"./types/projectTypes\";\r\n\r\nexport const getProjectList = async (data: any): Promise<[any, any]> => {\r\n  setHeaders();\r\n  try {\r\n    const response = await axiosInstance({\r\n      url: \"/Project/GetProjectListFilterByModule\",\r\n      method: \"POST\",\r\n      params: data,\r\n    });\r\n    return [response, null];\r\n  } catch (err) {\r\n    return [null, err];\r\n  }\r\n};\r\n\r\nexport const createProject = async (data: any): Promise<[any, any]> => {\r\n  setHeaders();\r\n  try {\r\n    const response = await axiosInstance({\r\n      url: \"/Project/AddProject\",\r\n      method: \"POST\",\r\n      data,\r\n    });\r\n    return [response, null];\r\n  } catch (err) {\r\n    return [null, err];\r\n  }\r\n};\r\n\r\nexport const getProjectDetails = async (): Promise<[any, any]> => {\r\n  setHeaders();\r\n  try {\r\n    const response = await axiosInstance({\r\n      url: `/Project/GetProjectByProjectId/${getProjectId()}`,\r\n      method: \"GET\",\r\n    });\r\n\r\n    return [response, null];\r\n  } catch (err) {\r\n    return [null, err];\r\n  }\r\n};\r\n\r\nexport const getDropdownLists = async (category: any): Promise<[any, any]> => {\r\n  setHeaders();\r\n  try {\r\n    const response = await axiosInstance({\r\n      url: `/Common/GetListItemByListItemCategorySystemName/${category}`,\r\n      method: \"GET\",\r\n    });\r\n    return [response, null];\r\n  } catch (err) {\r\n    return [null, err];\r\n  }\r\n};\r\n","import {\r\n  Breadcrumb,\r\n  Button,\r\n  Col,\r\n  DatePicker,\r\n  Divider,\r\n  Form,\r\n  Input,\r\n  message,\r\n  Row,\r\n  Select,\r\n} from \"antd\";\r\nimport { FolderOpenOutlined } from \"@ant-design/icons\";\r\n\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { useHistory } from \"react-router\";\r\nimport {\r\n  createProject,\r\n  getDropdownLists,\r\n} from \"../../store/actions/projectActionCreators\";\r\nimport moment from \"moment\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst { Option } = Select;\r\nconst CreateProject = () => {\r\n  const [form] = Form.useForm();\r\n  const [marketList, setMarketList] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const history = useHistory();\r\n\r\n  const handleFormSubmit = async (values: any) => {\r\n    setLoading(true);\r\n    const data = {\r\n      projectName: values.project_name,\r\n      startDate: moment(values.start_date).format(\"YYYY-MM-DD\"),\r\n      projectMarketListItemId: values.market,\r\n      projectDescription: values.project_description,\r\n    };\r\n\r\n    const [response, error] = await createProject(data);\r\n    setLoading(false);\r\n    if (response) {\r\n      message.success(\"Projet created Sucessfully \");\r\n      history.push(\"/\");\r\n    }\r\n    if (error) {\r\n      message.error(\"Unable to create project !\");\r\n    }\r\n  };\r\n\r\n  const getMarketLists = async () => {\r\n    const [response, error] = await getDropdownLists(\"ProjectMarket\");\r\n\r\n    if (response) {\r\n      setMarketList(response.data);\r\n    }\r\n    if (error) {\r\n      message.error(\"Failed to list market\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getMarketLists();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Row className=\"mt-4 p-4\">\r\n        <Col lg={6} xs={24} className=\"mx-auto\">\r\n          <FolderOpenOutlined\r\n            style={{\r\n              fontSize: 150,\r\n            }}\r\n          />\r\n          <h4>Create Blank Project</h4>\r\n          <p>\r\n            Create a blank project to house your files, plan your work, and\r\n            collaborate on code, among other things.\r\n          </p>\r\n        </Col>\r\n        <Col lg={14} xs={24} className=\"p-2 mt-2\">\r\n          <Row>\r\n            <Col lg={18} xs={24}>\r\n              <Breadcrumb>\r\n                <Breadcrumb.Item>New Project</Breadcrumb.Item>\r\n                <Breadcrumb.Item>\r\n                  <a href=\"\">Create Blank Project</a>\r\n                </Breadcrumb.Item>\r\n              </Breadcrumb>\r\n              <Divider />\r\n            </Col>\r\n          </Row>\r\n\r\n          <Form\r\n            className=\"mt-4\"\r\n            layout=\"vertical\"\r\n            onFinish={handleFormSubmit}\r\n            form={form}\r\n          >\r\n            <Row gutter={24}>\r\n              <Col lg={16} xs={24} className=\"gutter-row\">\r\n                <Form.Item\r\n                  label=\"Project Name\"\r\n                  name=\"project_name\"\r\n                  rules={[\r\n                    { required: true, message: \"Project Name is Required\" },\r\n                  ]}\r\n                >\r\n                  <Input placeholder=\"My awesome project\" />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={24}>\r\n              <Col lg={8} xs={24} className=\"gutter-row\">\r\n                <Form.Item\r\n                  label=\"Start Date\"\r\n                  name=\"start_date\"\r\n                  rules={[\r\n                    { required: true, message: \"Start Date is Required\" },\r\n                  ]}\r\n                >\r\n                  <DatePicker className=\"w-100\" onChange={() => {}} />\r\n                </Form.Item>\r\n              </Col>\r\n\r\n              <Col lg={8} xs={24} className=\"gutter-row\">\r\n                <Form.Item\r\n                  label=\"Market\"\r\n                  name=\"market\"\r\n                  rules={[{ required: true, message: \"Market is Required\" }]}\r\n                >\r\n                  <Select placeholder=\"Select Market\">\r\n                    {marketList.map((item: any, index: number) => {\r\n                      return (\r\n                        <Option key={index} value={item?.listItemId}>\r\n                          {item?.listItemName}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                  </Select>\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n              <Col lg={16} xs={24}>\r\n                <Form.Item\r\n                  label=\"Project Description (Optional)\"\r\n                  name=\"project_description\"\r\n                >\r\n                  <TextArea showCount maxLength={100} onChange={() => {}} />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row className=\"mt-4\">\r\n              <Col lg={8} xs={12}>\r\n                <Form.Item>\r\n                  <Button loading={loading} type=\"primary\" htmlType=\"submit\">\r\n                    Create Project\r\n                  </Button>\r\n                </Form.Item>\r\n              </Col>\r\n              <Col lg={8} xs={12} className=\"d-flex justify-content-end\">\r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"default\"\r\n                    onClick={() => {\r\n                      history.push(\"/\");\r\n                    }}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateProject;\r\n"],"sourceRoot":""}