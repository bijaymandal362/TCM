// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations.core
{
    [DbContext(typeof(DataContext))]
    [Migration("20220322040252_Description_Modified_on_ProjectModule")]
    partial class Description_Modified_on_ProjectModule
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DocumentId"));

                    b.Property<string>("Extension")
                        .HasColumnType("text");

                    b.Property<byte[]>("File")
                        .HasColumnType("bytea");

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("DocumentId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("Entities.Environment", b =>
                {
                    b.Property<int>("EnvironmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EnvironmentId"));

                    b.Property<string>("EnvironmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("URL")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("EnvironmentId");

                    b.HasIndex("EnvironmentName")
                        .IsUnique();

                    b.HasIndex("ProjectId");

                    b.ToTable("Environment");
                });

            modelBuilder.Entity("Entities.ListItem", b =>
                {
                    b.Property<int>("ListItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ListItemId"));

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSystemConfig")
                        .HasColumnType("boolean");

                    b.Property<int>("ListItemCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("ListItemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ListItemSystemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("ListItemId");

                    b.HasIndex("ListItemSystemName")
                        .IsUnique();

                    b.HasIndex("ListItemCategoryId", "ListItemName")
                        .IsUnique();

                    b.ToTable("ListItem");
                });

            modelBuilder.Entity("Entities.ListItemCategory", b =>
                {
                    b.Property<int>("ListItemCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ListItemCategoryId"));

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSystemConfig")
                        .HasColumnType("boolean");

                    b.Property<string>("ListItemCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ListItemCategorySystemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("ListItemCategoryId");

                    b.HasIndex("ListItemCategorySystemName")
                        .IsUnique();

                    b.ToTable("ListItemCategory");
                });

            modelBuilder.Entity("Entities.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MenuId"));

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MenuSlug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("MenuId");

                    b.HasIndex("MenuSlug")
                        .IsUnique();

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("Entities.MenuPermission", b =>
                {
                    b.Property<int>("MenuPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MenuPermissionId"));

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<int>("MenuId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("MenuPermissionId");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("MenuPermission");
                });

            modelBuilder.Entity("Entities.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PersonId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserMarketListItemId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserRoleListItemId")
                        .HasColumnType("integer");

                    b.HasKey("PersonId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserMarketListItemId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasIndex("UserRoleListItemId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Entities.PersonPersonalizationSetting", b =>
                {
                    b.Property<int>("PersonPersonalizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PersonPersonalizationId"));

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("ThemeListItemId")
                        .HasColumnType("integer");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("PersonPersonalizationId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("ThemeListItemId");

                    b.ToTable("PersonPersonalizationSetting");
                });

            modelBuilder.Entity("Entities.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectId"));

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("text");

                    b.Property<int>("ProjectMarketListItemId")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("citext");

                    b.Property<string>("ProjectSlug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("ProjectId");

                    b.HasIndex("ProjectMarketListItemId");

                    b.HasIndex("ProjectName")
                        .IsUnique();

                    b.HasIndex("ProjectSlug")
                        .IsUnique();

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Entities.ProjectMember", b =>
                {
                    b.Property<int>("ProjectMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectMemberId"));

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectRoleListItemId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("ProjectMemberId");

                    b.HasIndex("PersonId");

                    b.HasIndex("ProjectRoleListItemId");

                    b.HasIndex("ProjectId", "PersonId")
                        .IsUnique();

                    b.ToTable("ProjectMember");
                });

            modelBuilder.Entity("Entities.ProjectModule", b =>
                {
                    b.Property<int>("ProjectModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectModuleId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ParentProjectModuleId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectModuleListItemId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("ProjectModuleId");

                    b.HasIndex("ProjectModuleListItemId");

                    b.HasIndex("ProjectId", "ModuleName", "ParentProjectModuleId")
                        .IsUnique();

                    b.ToTable("ProjectModule");
                });

            modelBuilder.Entity("Entities.ProjectModuleDeveloper", b =>
                {
                    b.Property<int>("ProjectModuleDeveloperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectModuleDeveloperId"));

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean");

                    b.Property<int>("ProjectMemberId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectModuleId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("ProjectModuleDeveloperId");

                    b.HasIndex("ProjectMemberId");

                    b.HasIndex("ProjectModuleId", "ProjectMemberId")
                        .IsUnique();

                    b.ToTable("ProjectModuleDeveloper");
                });

            modelBuilder.Entity("Entities.TestCaseDetail", b =>
                {
                    b.Property<int>("TestCaseDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TestCaseDetailId"));

                    b.Property<string>("ExpectedResult")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<string>("PreCondition")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("ProjectModuleId")
                        .HasColumnType("integer");

                    b.Property<int>("TestCaseListItemId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("TestCaseDetailId");

                    b.HasIndex("ProjectModuleId")
                        .IsUnique();

                    b.HasIndex("TestCaseListItemId");

                    b.ToTable("TestCaseDetail");
                });

            modelBuilder.Entity("Entities.TestCaseStepDetail", b =>
                {
                    b.Property<int>("TestCaseStepDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TestCaseStepDetailId"));

                    b.Property<string>("ExpectedResult")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectModuleId")
                        .HasColumnType("integer");

                    b.Property<string>("StepDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("StepNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TestCaseListItemId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("TestCaseStepDetailId");

                    b.HasIndex("ProjectModuleId");

                    b.HasIndex("TestCaseListItemId");

                    b.ToTable("TestCaseStepDetail");
                });

            modelBuilder.Entity("Entities.TestPlan", b =>
                {
                    b.Property<int>("TestPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TestPlanId"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ParentTestPlanId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("TestPlanName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TestPlanTypeListItemId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("TestPlanId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TestPlanTypeListItemId");

                    b.HasIndex("ParentTestPlanId", "TestPlanName", "ProjectId")
                        .IsUnique();

                    b.ToTable("TestPlan");
                });

            modelBuilder.Entity("Entities.TestPlanTestCase", b =>
                {
                    b.Property<int>("TestPlanTestCaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TestPlanTestCaseId"));

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectModuleId")
                        .HasColumnType("integer");

                    b.Property<int>("TestPlanId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("TestPlanTestCaseId");

                    b.HasIndex("ProjectModuleId");

                    b.HasIndex("TestPlanId", "ProjectModuleId")
                        .IsUnique();

                    b.ToTable("TestPlanTestCase");
                });

            modelBuilder.Entity("Entities.TestRun", b =>
                {
                    b.Property<int>("TestRunId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TestRunId"));

                    b.Property<int?>("DefaultAssigneeProjectMemberId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("EnvironmentId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("TestRunId");

                    b.HasIndex("DefaultAssigneeProjectMemberId");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("TestRun");
                });

            modelBuilder.Entity("Entities.TestRunHistory", b =>
                {
                    b.Property<int>("TestRunHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TestRunHistoryId"));

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TestRunId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("TotalTimeSpent")
                        .HasColumnType("interval");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("TestRunHistoryId");

                    b.HasIndex("TestRunId");

                    b.ToTable("TestRunHistory");
                });

            modelBuilder.Entity("Entities.TestRunPlan", b =>
                {
                    b.Property<int>("TestRunPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TestRunPlanId"));

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<int>("TestPlanId")
                        .HasColumnType("integer");

                    b.Property<int>("TestRunId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("TestRunPlanId");

                    b.HasIndex("TestPlanId");

                    b.HasIndex("TestRunId");

                    b.ToTable("TestRunPlan");
                });

            modelBuilder.Entity("Entities.TestRunPlanDetail", b =>
                {
                    b.Property<int>("TestRunPlanDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TestRunPlanDetailId"));

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<string>("TestCaseDetailJson")
                        .HasColumnType("text");

                    b.Property<string>("TestCaseStepDetailJson")
                        .HasColumnType("text");

                    b.Property<string>("TestPlanDetailJson")
                        .HasColumnType("text");

                    b.Property<int>("TestRunPlanId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("TestRunPlanDetailId");

                    b.HasIndex("TestRunPlanId");

                    b.ToTable("TestRunPlanDetail");
                });

            modelBuilder.Entity("Entities.TestRunTestCaseHistory", b =>
                {
                    b.Property<int>("TestRunTestCaseHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TestRunTestCaseHistoryId"));

                    b.Property<int?>("AssigneeProjectMemberId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectModuleId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TestPlanId")
                        .HasColumnType("integer");

                    b.Property<int>("TestRunHistoryId")
                        .HasColumnType("integer");

                    b.Property<int>("TestRunStatusListItemId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("TotalTimeSpent")
                        .HasColumnType("interval");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("TestRunTestCaseHistoryId");

                    b.HasIndex("AssigneeProjectMemberId");

                    b.HasIndex("ProjectModuleId");

                    b.HasIndex("TestPlanId");

                    b.HasIndex("TestRunHistoryId");

                    b.HasIndex("TestRunStatusListItemId");

                    b.ToTable("TestRunTestCaseHistory");
                });

            modelBuilder.Entity("Entities.TestRunTestCaseHistoryDocument", b =>
                {
                    b.Property<int>("TestRunTestCaseHistoryDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TestRunTestCaseHistoryDocumentId"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<int>("TestRunTestCaseHistoryId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("TestRunTestCaseHistoryDocumentId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("TestRunTestCaseHistoryId", "DocumentId")
                        .IsUnique();

                    b.ToTable("TestRunTestCaseHistoryDocument");
                });

            modelBuilder.Entity("Entities.TestRunTestCaseStepHistory", b =>
                {
                    b.Property<int>("TestRunTestCaseStepHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TestRunTestCaseStepHistoryId"));

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TestCaseStepDetailId")
                        .HasColumnType("integer");

                    b.Property<int>("TestRunStatusListItemId")
                        .HasColumnType("integer");

                    b.Property<int>("TestRunTestCaseHistoryId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("TotalTimeSpent")
                        .HasColumnType("interval");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("TestRunTestCaseStepHistoryId");

                    b.HasIndex("TestCaseStepDetailId");

                    b.HasIndex("TestRunStatusListItemId");

                    b.HasIndex("TestRunTestCaseHistoryId");

                    b.ToTable("TestRunTestCaseStepHistory");
                });

            modelBuilder.Entity("Entities.Environment", b =>
                {
                    b.HasOne("Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Entities.ListItem", b =>
                {
                    b.HasOne("Entities.ListItemCategory", "ListItemCategory")
                        .WithMany()
                        .HasForeignKey("ListItemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ListItemCategory");
                });

            modelBuilder.Entity("Entities.MenuPermission", b =>
                {
                    b.HasOne("Entities.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.ListItem", "RoleListItem")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("RoleListItem");
                });

            modelBuilder.Entity("Entities.Person", b =>
                {
                    b.HasOne("Entities.ListItem", "UserMarketListItem")
                        .WithMany()
                        .HasForeignKey("UserMarketListItemId");

                    b.HasOne("Entities.ListItem", "UserRoleListItem")
                        .WithMany()
                        .HasForeignKey("UserRoleListItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserMarketListItem");

                    b.Navigation("UserRoleListItem");
                });

            modelBuilder.Entity("Entities.PersonPersonalizationSetting", b =>
                {
                    b.HasOne("Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.ListItem", "ListItem")
                        .WithMany()
                        .HasForeignKey("ThemeListItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ListItem");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Entities.Project", b =>
                {
                    b.HasOne("Entities.ListItem", "ProjectMarketListItem")
                        .WithMany()
                        .HasForeignKey("ProjectMarketListItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectMarketListItem");
                });

            modelBuilder.Entity("Entities.ProjectMember", b =>
                {
                    b.HasOne("Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.ListItem", "ProjectRoleListItem")
                        .WithMany()
                        .HasForeignKey("ProjectRoleListItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Project");

                    b.Navigation("ProjectRoleListItem");
                });

            modelBuilder.Entity("Entities.ProjectModule", b =>
                {
                    b.HasOne("Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.ListItem", "ProjectModuleListItem")
                        .WithMany()
                        .HasForeignKey("ProjectModuleListItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("ProjectModuleListItem");
                });

            modelBuilder.Entity("Entities.ProjectModuleDeveloper", b =>
                {
                    b.HasOne("Entities.ProjectMember", "ProjectMember")
                        .WithMany()
                        .HasForeignKey("ProjectMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.ProjectModule", "ProjectModule")
                        .WithMany()
                        .HasForeignKey("ProjectModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectMember");

                    b.Navigation("ProjectModule");
                });

            modelBuilder.Entity("Entities.TestCaseDetail", b =>
                {
                    b.HasOne("Entities.ProjectModule", "ProjectModule")
                        .WithMany()
                        .HasForeignKey("ProjectModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.ListItem", "TestCaseListItem")
                        .WithMany()
                        .HasForeignKey("TestCaseListItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectModule");

                    b.Navigation("TestCaseListItem");
                });

            modelBuilder.Entity("Entities.TestCaseStepDetail", b =>
                {
                    b.HasOne("Entities.ProjectModule", "ProjectModule")
                        .WithMany()
                        .HasForeignKey("ProjectModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.ListItem", "TestCaseListItem")
                        .WithMany()
                        .HasForeignKey("TestCaseListItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectModule");

                    b.Navigation("TestCaseListItem");
                });

            modelBuilder.Entity("Entities.TestPlan", b =>
                {
                    b.HasOne("Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.ListItem", "TestPlanTypeListItem")
                        .WithMany()
                        .HasForeignKey("TestPlanTypeListItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("TestPlanTypeListItem");
                });

            modelBuilder.Entity("Entities.TestPlanTestCase", b =>
                {
                    b.HasOne("Entities.ProjectModule", "ProjectModule")
                        .WithMany()
                        .HasForeignKey("ProjectModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.TestPlan", "TestPlan")
                        .WithMany()
                        .HasForeignKey("TestPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectModule");

                    b.Navigation("TestPlan");
                });

            modelBuilder.Entity("Entities.TestRun", b =>
                {
                    b.HasOne("Entities.ProjectMember", "ProjectMember")
                        .WithMany()
                        .HasForeignKey("DefaultAssigneeProjectMemberId");

                    b.HasOne("Entities.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId");

                    b.HasOne("Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Environment");

                    b.Navigation("Project");

                    b.Navigation("ProjectMember");
                });

            modelBuilder.Entity("Entities.TestRunHistory", b =>
                {
                    b.HasOne("Entities.TestRun", "TestRun")
                        .WithMany()
                        .HasForeignKey("TestRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestRun");
                });

            modelBuilder.Entity("Entities.TestRunPlan", b =>
                {
                    b.HasOne("Entities.TestPlan", "TestPlan")
                        .WithMany()
                        .HasForeignKey("TestPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.TestRun", "TestRun")
                        .WithMany()
                        .HasForeignKey("TestRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestPlan");

                    b.Navigation("TestRun");
                });

            modelBuilder.Entity("Entities.TestRunPlanDetail", b =>
                {
                    b.HasOne("Entities.TestRunPlan", "TestRunPlan")
                        .WithMany()
                        .HasForeignKey("TestRunPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestRunPlan");
                });

            modelBuilder.Entity("Entities.TestRunTestCaseHistory", b =>
                {
                    b.HasOne("Entities.ProjectMember", "ProjectMember")
                        .WithMany()
                        .HasForeignKey("AssigneeProjectMemberId");

                    b.HasOne("Entities.ProjectModule", "ProjectModule")
                        .WithMany()
                        .HasForeignKey("ProjectModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.TestPlan", "TestPlan")
                        .WithMany()
                        .HasForeignKey("TestPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.TestRunHistory", "TestRunHistory")
                        .WithMany()
                        .HasForeignKey("TestRunHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.ListItem", "TestRunStatusListItem")
                        .WithMany()
                        .HasForeignKey("TestRunStatusListItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectMember");

                    b.Navigation("ProjectModule");

                    b.Navigation("TestPlan");

                    b.Navigation("TestRunHistory");

                    b.Navigation("TestRunStatusListItem");
                });

            modelBuilder.Entity("Entities.TestRunTestCaseHistoryDocument", b =>
                {
                    b.HasOne("Entities.Document", "ProjectMember")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.TestRunTestCaseHistory", "ProjectModule")
                        .WithMany()
                        .HasForeignKey("TestRunTestCaseHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectMember");

                    b.Navigation("ProjectModule");
                });

            modelBuilder.Entity("Entities.TestRunTestCaseStepHistory", b =>
                {
                    b.HasOne("Entities.TestCaseStepDetail", "TestCaseStepDetail")
                        .WithMany()
                        .HasForeignKey("TestCaseStepDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.ListItem", "TestRunStatusListItem")
                        .WithMany()
                        .HasForeignKey("TestRunStatusListItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.TestRunTestCaseHistory", "TestRunTestCaseHistory")
                        .WithMany()
                        .HasForeignKey("TestRunTestCaseHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCaseStepDetail");

                    b.Navigation("TestRunStatusListItem");

                    b.Navigation("TestRunTestCaseHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
